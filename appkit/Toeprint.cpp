/*
 * Software by Thanh Phung -- thanhtphung@yahoo.com.
 * No copyrights. No warranties. No restrictions in reuse.
 */
#include "syskit/sys.hpp"

#include "appkit-pch.h"
#include "appkit/Toeprint.hpp"

using namespace syskit;

//
// For checksum computation, an 8-bit byte (u8) is packed into a
// 6-bit value (v6). This is done via truncation (v6 == u8 % 64)
// except for the u8 bytes in the s_code array (s_code[v6] == u8).
//
static const unsigned char s_code[] =
{
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', //0x00-0x07
    'i', 'j', 'k', '2', 'm', 'n', 'o', 'p', //0x08-0x0f
    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', //0x10-0x17
    'y', 'z', '3', '4', '5', '6', '7', '8', //0x18-0x1f
    'Z', 'Y', 'X', 'W', 'V', 'U', 'T', 'S', //0x20-0x27
    'R', 'Q', 'P', '0', 'N', 'M', 'L', 'K', //0x28-0x2f
    'J', 'I', 'H', 'G', 'F', 'E', 'D', 'C', //0x30-0x37
    'B', 'A', '3', '4', '5', '6', '7', '8'  //0x38-0x3f
};

//
// Look-up table for checksum computation (s_key[u8] = v6).
//
static const unsigned char s_key[] =
{
    0x00U, 0x01U, 0x02U, 0x03U, 0x04U, 0x05U, 0x06U, 0x07U, //0x00-0x07
    0x08U, 0x09U, 0x0aU, 0x0bU, 0x0cU, 0x0dU, 0x0eU, 0x0fU, //0x08-0x0f
    0x10U, 0x11U, 0x12U, 0x13U, 0x14U, 0x15U, 0x16U, 0x17U, //0x10-0x17
    0x18U, 0x19U, 0x1aU, 0x1bU, 0x1cU, 0x1dU, 0x1eU, 0x1fU, //0x18-0x1f
    0x20U, 0x21U, 0x22U, 0x23U, 0x24U, 0x25U, 0x26U, 0x27U, //0x20-0x27
    0x28U, 0x29U, 0x2aU, 0x2bU, 0x2cU, 0x2dU, 0x2eU, 0x2fU, //0x28-0x2f
    0x2bU, 0x31U, 0x0bU, 0x1aU, 0x1bU, 0x1cU, 0x1dU, 0x1eU, //0x30-0x37 0x30='0'
    0x1fU, 0x39U, 0x3aU, 0x3bU, 0x3cU, 0x3dU, 0x3eU, 0x3fU, //0x38-0x3f 0x39='9'

    0x00U, 0x39U, 0x38U, 0x37U, 0x36U, 0x35U, 0x34U, 0x33U, //0x40-0x47 0x41='A'
    0x32U, 0x31U, 0x30U, 0x2fU, 0x2eU, 0x2dU, 0x2cU, 0x0fU, //0x48-0x4f
    0x2aU, 0x29U, 0x28U, 0x27U, 0x26U, 0x25U, 0x24U, 0x23U, //0x50-0x57
    0x22U, 0x21U, 0x20U, 0x1bU, 0x1cU, 0x1dU, 0x1eU, 0x1fU, //0x58-0x5f 0x5a='Z'
    0x20U, 0x00U, 0x01U, 0x02U, 0x03U, 0x04U, 0x05U, 0x06U, //0x60-0x67 0x61='a'
    0x07U, 0x08U, 0x09U, 0x0aU, 0x2cU, 0x0cU, 0x0dU, 0x0eU, //0x68-0x6f
    0x0fU, 0x10U, 0x11U, 0x12U, 0x13U, 0x14U, 0x15U, 0x16U, //0x70-0x77
    0x17U, 0x18U, 0x19U, 0x3bU, 0x3cU, 0x3dU, 0x3eU, 0x3fU, //0x78-0x7f 0x7a='z'

    0x00U, 0x01U, 0x02U, 0x03U, 0x04U, 0x05U, 0x06U, 0x07U, //0x80-0x87
    0x08U, 0x09U, 0x0aU, 0x0bU, 0x0cU, 0x0dU, 0x0eU, 0x0fU, //0x88-0x8f
    0x10U, 0x11U, 0x12U, 0x13U, 0x14U, 0x15U, 0x16U, 0x17U, //0x90-0x97
    0x18U, 0x19U, 0x1aU, 0x1bU, 0x1cU, 0x1dU, 0x1eU, 0x1fU, //0x98-0x9f
    0x20U, 0x21U, 0x22U, 0x23U, 0x24U, 0x25U, 0x26U, 0x27U, //0xa0-0xa7
    0x28U, 0x29U, 0x2aU, 0x2bU, 0x2cU, 0x2dU, 0x2eU, 0x2fU, //0xa8-0xaf
    0x30U, 0x31U, 0x32U, 0x33U, 0x34U, 0x35U, 0x36U, 0x37U, //0xb0-0xb7
    0x38U, 0x39U, 0x3aU, 0x3bU, 0x3cU, 0x3dU, 0x3eU, 0x3fU, //0xb8-0xbf

    0x00U, 0x01U, 0x02U, 0x03U, 0x04U, 0x05U, 0x06U, 0x07U, //0xc0-0xc7
    0x08U, 0x09U, 0x0aU, 0x0bU, 0x0cU, 0x0dU, 0x0eU, 0x0fU, //0xc8-0xcf
    0x10U, 0x11U, 0x12U, 0x13U, 0x14U, 0x15U, 0x16U, 0x17U, //0xd0-0xd7
    0x18U, 0x19U, 0x1aU, 0x1bU, 0x1cU, 0x1dU, 0x1eU, 0x1fU, //0xd8-0xdf
    0x20U, 0x21U, 0x22U, 0x23U, 0x24U, 0x25U, 0x26U, 0x27U, //0xe0-0xe7
    0x28U, 0x29U, 0x2aU, 0x2bU, 0x2cU, 0x2dU, 0x2eU, 0x2fU, //0xe8-0xef
    0x30U, 0x31U, 0x32U, 0x33U, 0x34U, 0x35U, 0x36U, 0x37U, //0xf0-0xf7
    0x38U, 0x39U, 0x3aU, 0x3bU, 0x3cU, 0x3dU, 0x3eU, 0x3fU  //0xf8-0xff
};

BEGIN_NAMESPACE1(appkit)


//!
//! Reset instance with given strings. Return the toeprint as a
//! null-terminated string. Its length is Toeprint::Length.
//!
const char* Toeprint::reset(const String& key0, const String& key1)
{
    String key(key0.byteSize() + key1.byteSize() - 1);
    key = key1;
    key += key0;
    unsigned int sum = checksum(key.ascii());

    mkCode(sum);
    return code_;
}


//!
//! Reset instance with given strings. Return the toeprint as a
//! null-terminated string. Its length is Toeprint::Length.
//!
const char* Toeprint::reset(const String& key0, const unsigned char* key1, size_t key1Length)
{
    size_t key0Length = key0.byteSize() - 1;
    char* key = new char[key0Length + key1Length + 1];
    memcpy(key, key1, key1Length);
    memcpy(key + key1Length, key0.raw(), key0Length + 1);
    unsigned int sum = checksum(key);
    delete[] key;

    mkCode(sum);
    return code_;
}


unsigned int Toeprint::checksum(const char* key)
{
    unsigned int sum = 0;
    unsigned int packed[3] = {0, 0, 0};
    unsigned int i = 0;
    for (const char* s = key; *s; ++i, ++s)
    {
        unsigned int c = *s;
        unsigned int k64 = s_key[c];
        switch (i)
        {
        case 0:
            packed[0] = k64;
            //--packed[1] already 0;
            //--packed[2] already 0;
            break;
        case 1:
        case 2:
        case 3:
        case 4:
            packed[0] = (packed[0] << 6) | k64;
            break;
        case 5:
            packed[0] = (packed[0] << 2) | (k64 >> 4);
            packed[1] = k64 & 0x0fU;
            break;
        case 6:
            packed[1] = (packed[1] << 4) | k64;
            break;
        case 7:
        case 8:
        case 9:
            packed[1] = (packed[1] << 6) | k64;
            break;
        case 10:
            packed[1] = (packed[1] << 4) | (k64 >> 2);
            packed[2] = k64 & 0x03U;
            break;
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            packed[2] = (packed[2] << 6) | k64;
            break;
        default: //16
            sum ^= packed[0] ^ packed[1] ^ packed[2];
            packed[0] = k64;
            packed[1] = 0;
            packed[2] = 0;
            i = 0;
            break;
        }
    }

    if (i != 1)
    {
        sum ^= packed[0] ^ packed[1] ^ packed[2];
    }

    sum = bswap32(sum);
    return sum;
}


void Toeprint::mkCode(unsigned int sum)
{
    code_[0] = s_code[sum & 0x3fU];
    code_[1] = s_code[(sum >> 6) & 0x3fU];
    code_[2] = s_code[(sum >> 12) & 0x3fU];
    code_[3] = s_code[(sum >> 18) & 0x3fU];
    code_[4] = s_code[(sum >> 24) & 0x3fU];
    code_[5] = s_code[(sum >> 30) & 0x3fU];
    code_[6] = 0;
}

END_NAMESPACE1
